var N=null,E="",T="t",U="u",searchIndex={};
var R=["rustacuda","cudaresult","context","contextflags","cudaapiversion","get_api_version","Get the API version used to create this context.","unownedcontext","cacheconfig","device","Return resource limits for the current context.","sharedmemoryconfig","streampriorityrange","resourcelimit","get_device","devices","NotReady","Returns an empty set of flags","Returns the set containing all flags.","eventflags","Returns the raw value of the flags currently stored.","from_bits","Convert from underlying bit representation, unless that…","from_bits_truncate","Convert from underlying bit representation, dropping any…","is_empty","Returns `true` if no flags are currently stored.","Returns `true` if all flags are currently set.","intersects","Returns `true` if there are flags common to both `self`…","contains","Returns `true` all of the flags in `other` are contained…","Inserts the specified flags in-place.","Removes the specified flags in-place.","Toggles the specified flags in-place.","Inserts or removes the specified flags depending on the…","eventstatus","synchronize","dropresult","MaxThreadsPerBlock","gridsize","blocksize","get_attribute","set_cache_config","set_shared_memory_config","An iterator over a `DeviceSlice` in (non-overlapping)…","devicepointer","unifiedpointer","cuarray_format","arrayobjectflags","from_raw","arrayformat","c_uint","arraydescriptor","arrayobject","rustacuda::memory","devicebox","uninitialized","Allocate a new device buffer large enough to hold `size`…","devicebuffer","Returns an iterator over `chunk_size` elements of the…","as_device_ptr","from_raw_parts","deviceslice","from_slice","Allocate a new page-locked buffer large enough to hold…","lockedbuffer","unifiedbox","Allocate a new unified buffer large enough to hold `size`…","as_slice","Extracts a slice containing the entire buffer.","as_mut_slice","Extracts a mutable slice of the entire buffer.","as_unified_ptr","unifiedbuffer","Sealed trait implemented by types which can be the source…","module","function","DeviceBuffer","Fixed-size device-side buffer. Provides basic access to…","UnifiedBuffer","Fixed-size buffer in unified memory.","CopyDestination","copy_from","Copy data from `source`. `source` must be the same size as…","Copy data to `dest`. `dest` must be the same size as `self`.","stream","streamflags","DEFAULT","No flags set.","streamwaiteventflags","option","is_all","insert","remove","toggle","get_flags","cudaflags","to_owned","clone_into","borrow_mut","rustacuda::context","try_from","try_into","type_id","rustacuda::device","rustacuda::error","rustacuda::event","rustacuda::function","into_iter","to_string","rustacuda::memory::array","rustacuda::module","rustacuda::stream","partial_cmp","ordering","formatter","get_inner","cucontext","copy_to","async_copy_from","async_copy_to","deviceattribute","functionattribute","next_back","cudaerror","devicechunks","intoiterator","size_hint","deref_mut","Returns the set difference of the two sets of flags.","sub_assign","Disables all flags enabled in the set.","Returns the complement of this set of flags.","Returns the intersection between the two sets of flags.","Returns the union of the two sets of flags.","Returns the left flags, but with all the right flags…","bitand_assign","Disables all flags disabled in the set.","bitor_assign","Adds the set of flags.","bitxor_assign","Toggles the set of flags.","index_mut","rangefull","rangefrom","rangeinclusive","rangetoinclusive","from_iter","Calculates the offset from a pointer (convenience for…","Calculates the offset from a pointer using wrapping…","as_raw_mut","wrapping_offset","wrapping_add","wrapping_sub","StreamPriorityRange","CacheConfig","ResourceLimit","SharedMemoryConfig","ContextFlags","UnownedContext","ContextStack","CurrentContext","DeviceAttribute","CudaError","EventStatus","EventFlags","BlockSize","FunctionAttribute","ArrayFormat","ArrayObjectFlags","ArrayDescriptor","ArrayObject","DeviceBox","DeviceSlice","LockedBuffer","UnifiedBox","AsyncCopyDestination","StreamFlags","StreamWaitEventFlags","CudaFlags","CudaApiVersion","DevicePointer","UnifiedPointer","DeviceChunks","DeviceChunksMut"];

searchIndex[R[0]]={"doc":"This crate provides a safe, user-friendly wrapper around…","i":[[3,R[180],R[0],"Bit flags for initializing the CUDA driver. Currently, no…",N,N],[3,R[181],E,"Struct representing the CUDA API version number.",N,N],[5,"init",E,"Initialize the CUDA Driver API.",N,[[[R[97]]],[R[1]]]],[5,"quick_init",E,"Shortcut for initializing the CUDA Driver API and creating…",N,[[],[[R[2]],[R[1],[R[2]]]]]],[0,R[2],E,"CUDA context management",N,N],[3,R[159],R[101],"Bit flags for initializing the CUDA context.",N,N],[3,"Context",E,"Owned handle to a CUDA context.",N,N],[3,R[160],E,"Non-owning handle to a CUDA context.",N,N],[3,R[161],E,"Type used to represent the thread-local context stack.",N,N],[3,R[155],E,"Struct representing a range of stream priorities.",N,N],[12,"least",E,"The least stream priority",0,N],[12,"greatest",E,"The greatest stream priority",0,N],[3,R[162],E,"Type representing the top context in the thread-local stack.",N,N],[4,R[156],E,"This enumeration represents configuration settings for…",N,N],[13,"PreferNone",E,"No preference for shared memory or L1 (default)",1,N],[13,"PreferShared",E,"Prefer larger shared memory and smaller L1 cache",1,N],[13,"PreferL1",E,"Prefer larger L1 cache and smaller shared memory",1,N],[13,"PreferEqual",E,"Prefer equal-sized L1 cache and shared memory",1,N],[4,R[157],E,"This enumeration represents the limited resources which…",N,N],[13,"StackSize",E,"The size in bytes of each GPU thread stack",2,N],[13,"PrintfFifoSize",E,"The size in bytes of the FIFO used by the `printf()`…",2,N],[13,"MallocHeapSize",E,"The size in bytes of the heap used by the `malloc()` and…",2,N],[13,"DeviceRuntimeSynchronizeDepth",E,"The maximum nesting depth of a grid at which a thread can…",2,N],[13,"DeviceRuntimePendingLaunchCount",E,"The maximum number of outstanding device runtime launches…",2,N],[13,"MaxL2FetchGranularity",E,"L2 cache fetch granularity",2,N],[4,R[158],E,"This enumeration represents the options for configuring…",N,N],[13,"DefaultBankSize",E,"Set shared-memory bank size to the default.",3,N],[13,"FourByteBankSize",E,"Set shared-memory bank width to four bytes",3,N],[13,"EightByteBankSize",E,"Set shared-memory bank width to eight bytes",3,N],[8,"ContextHandle",E,"Sealed trait for `Context` and `UnownedContext`. Not…",N,N],[18,"SCHED_SPIN",E,"Instructs CUDA to actively spin when waiting for results…",4,N],[18,"SCHED_YIELD",E,"Instructs CUDA to yield its thread when waiting for…",4,N],[18,"SCHED_BLOCKING_SYNC",E,"Instructs CUDA to block the CPU thread on a…",4,N],[18,"SCHED_AUTO",E,"Instructs CUDA to automatically choose whether to yield to…",4,N],[18,"MAP_HOST",E,"Instructs CUDA to support mapped pinned allocations. This…",4,N],[18,"LMEM_RESIZE_TO_MAX",E,"Instruct CUDA not to reduce local memory after resizing…",4,N],[11,"empty",E,R[17],4,[[],[R[3]]]],[11,"all",E,R[18],4,[[],[R[3]]]],[11,"bits",E,R[20],4,[[["self"]],["u32"]]],[11,R[21],E,R[22],4,[[["u32"]],[[R[91],[R[3]]],[R[3]]]]],[11,R[23],E,R[24],4,[[["u32"]],[R[3]]]],[11,R[25],E,R[26],4,[[["self"]],["bool"]]],[11,R[92],E,R[27],4,[[["self"]],["bool"]]],[11,R[28],E,R[29],4,[[[R[3]],["self"]],["bool"]]],[11,R[30],E,R[31],4,[[[R[3]],["self"]],["bool"]]],[11,R[93],E,R[32],4,[[["self"],[R[3]]]]],[11,R[94],E,R[33],4,[[["self"],[R[3]]]]],[11,R[95],E,R[34],4,[[["self"],[R[3]]]]],[11,"set",E,R[35],4,[[["self"],[R[3]],["bool"]]]],[11,"create_and_push",E,"Create a CUDA context for the given device.",5,[[[R[3]],[R[9]]],[[R[2]],[R[1],[R[2]]]]]],[11,R[5],E,R[6],5,[[["self"]],[[R[4]],[R[1],[R[4]]]]]],[11,"get_unowned",E,"Returns an non-owning handle to this context.",5,[[["self"]],[R[7]]]],[11,"drop",E,"Destroy a `Context`, returning an error.",5,[[[R[2]]],[[R[2]],[R[38],[R[2]]]]]],[11,R[5],E,R[6],6,[[["self"]],[[R[4]],[R[1],[R[4]]]]]],[11,"pop",E,"Pop the current context off the stack and return the…",7,[[],[[R[1],[R[7]]],[R[7]]]]],[11,"push",E,"Push the given context to the top of the stack",7,[[["c"]],[R[1]]]],[11,"get_cache_config",E,"Returns the preferred cache configuration for the current…",8,[[],[[R[8]],[R[1],[R[8]]]]]],[11,R[14],E,"Return the device ID for the current context.",8,[[],[[R[1],[R[9]]],[R[9]]]]],[11,R[96],E,"Return the context flags for the current context.",8,[[],[[R[1],[R[3]]],[R[3]]]]],[11,"get_resource_limit",E,R[10],8,[[[R[13]]],[["usize"],[R[1],["usize"]]]]],[11,"get_shared_memory_config",E,R[10],8,[[],[[R[1],[R[11]]],[R[11]]]]],[11,"get_stream_priority_range",E,"Return the least and greatest stream priorities.",8,[[],[[R[12]],[R[1],[R[12]]]]]],[11,R[43],E,"Sets the preferred cache configuration for the current…",8,[[[R[8]]],[R[1]]]],[11,"set_resource_limit",E,"Sets a requested resource limit for the current context.",8,[[[R[13]],["usize"]],[R[1]]]],[11,R[44],E,"Sets the preferred shared memory configuration for the…",8,[[[R[11]]],[R[1]]]],[11,"get_current",E,"Returns a non-owning handle to the current context.",8,[[],[[R[1],[R[7]]],[R[7]]]]],[11,"set_current",E,"Set the given context as the current context for this…",8,[[["c"]],[R[1]]]],[11,R[37],E,"Block to wait for a context's tasks to complete.",8,[[],[R[1]]]],[0,R[9],R[0],"Functions and types for enumerating CUDA devices and…",N,N],[3,"Device",R[105],"Opaque handle to a CUDA device.",N,N],[3,"Devices",E,"Iterator over all available CUDA devices. See the…",N,N],[4,R[163],E,"All supported device attributes for Device::get_attribute",N,N],[13,R[39],E,"Maximum number of threads per block",9,N],[13,"MaxBlockDimX",E,"Maximum x-dimension of a block",9,N],[13,"MaxBlockDimY",E,"Maximum y-dimension of a block",9,N],[13,"MaxBlockDimZ",E,"Maximum z-dimension of a block",9,N],[13,"MaxGridDimX",E,"Maximum x-dimension of a grid",9,N],[13,"MaxGridDimY",E,"Maximum y-dimension of a grid",9,N],[13,"MaxGridDimZ",E,"Maximum a-dimension of a grid",9,N],[13,"MaxSharedMemoryPerBlock",E,"Maximum amount of shared memory available to a thread…",9,N],[13,"TotalConstantMemory",E,"Memory available on device for constant variables in a…",9,N],[13,"WarpSize",E,"Warp size in threads",9,N],[13,"MaxPitch",E,"Maximum pitch in bytes allowed by the memory copy…",9,N],[13,"MaxRegistersPerBlock",E,"Maximum number of 32-bit registers available to a thread…",9,N],[13,"ClockRate",E,"Typical clock frequency in kilohertz",9,N],[13,"TextureAlignment",E,"Alignment requirement for textures",9,N],[13,"MultiprocessorCount",E,"Number of multiprocessors on device.",9,N],[13,"KernelExecTimeout",E,"Specifies whether there is a run time limit on kernels",9,N],[13,"Integrated",E,"Device is integrated with host memory",9,N],[13,"CanMapHostMemory",E,"Device can map host memory into CUDA address space",9,N],[13,"ComputeMode",E,"Compute Mode",9,N],[13,"MaximumTexture1DWidth",E,"Maximum 1D texture width",9,N],[13,"MaximumTexture2DWidth",E,"Maximum 2D texture width",9,N],[13,"MaximumTexture2DHeight",E,"Maximum 2D texture height",9,N],[13,"MaximumTexture3DWidth",E,"Maximum 3D texture width",9,N],[13,"MaximumTexture3DHeight",E,"Maximum 3D texture height",9,N],[13,"MaximumTexture3DDepth",E,"Maximum 3D texture depth",9,N],[13,"MaximumTexture2DLayeredWidth",E,"Maximum 2D layered texture width",9,N],[13,"MaximumTexture2DLayeredHeight",E,"Maximum 2D layered texture height",9,N],[13,"MaximumTexture2DLayeredLayers",E,"Maximum layers in a 2D layered texture",9,N],[13,"SurfaceAlignment",E,"Alignment requirement for surfaces",9,N],[13,"ConcurrentKernels",E,"Device can possibly execute multiple kernels concurrently",9,N],[13,"EccEnabled",E,"Device has ECC support enabled",9,N],[13,"PciBusId",E,"PCI bus ID of the device",9,N],[13,"PciDeviceId",E,"PCI device ID of the device",9,N],[13,"TccDriver",E,"Device is using TCC driver model",9,N],[13,"MemoryClockRate",E,"Peak memory clock frequency in kilohertz",9,N],[13,"GlobalMemoryBusWidth",E,"Global memory bus width in bits",9,N],[13,"L2CacheSize",E,"Size of L2 cache in bytes.",9,N],[13,"MaxThreadsPerMultiprocessor",E,"Maximum resident threads per multiprocessor",9,N],[13,"AsyncEngineCount",E,"Number of asynchronous engines",9,N],[13,"UnifiedAddressing",E,"Device shares a unified address space with the host",9,N],[13,"MaximumTexture1DLayeredWidth",E,"Maximum 1D layered texture width",9,N],[13,"MaximumTexture1DLayeredLayers",E,"Maximum layers in a 1D layered texture",9,N],[13,"MaximumTexture2DGatherWidth",E,"Maximum 2D texture width if CUDA_ARRAY3D_TEXTURE_GATHER is…",9,N],[13,"MaximumTexture2DGatherHeight",E,"Maximum 2D texture height if CUDA_ARRAY3D_TEXTURE_GATHER…",9,N],[13,"MaximumTexture3DWidthAlternate",E,"Alternate maximum 3D texture width",9,N],[13,"MaximumTexture3DHeightAlternate",E,"Alternate maximum 3D texture height",9,N],[13,"MaximumTexture3DDepthAlternate",E,"Alternate maximum 3D texture depth",9,N],[13,"PciDomainId",E,"PCI domain ID of the device",9,N],[13,"TexturePitchAlignment",E,"Pitch alignment requirement for textures",9,N],[13,"MaximumTextureCubemapWidth",E,"Maximum cubemap texture width/height",9,N],[13,"MaximumTextureCubemapLayeredWidth",E,"Maximum cubemap layered texture width/height",9,N],[13,"MaximumTextureCubemapLayeredLayers",E,"Maximum layers in a cubemap layered texture",9,N],[13,"MaximumSurface1DWidth",E,"Maximum 1D surface width",9,N],[13,"MaximumSurface2DWidth",E,"Maximum 2D surface width",9,N],[13,"MaximumSurface2DHeight",E,"Maximum 2D surface height",9,N],[13,"MaximumSurface3DWidth",E,"Maximum 3D surface width",9,N],[13,"MaximumSurface3DHeight",E,"Maximum 3D surface height",9,N],[13,"MaximumSurface3DDepth",E,"Maximum 3D surface depth",9,N],[13,"MaximumSurface1DLayeredWidth",E,"Maximum 1D layered surface width",9,N],[13,"MaximumSurface1DLayeredLayers",E,"Maximum layers in a 1D layered surface",9,N],[13,"MaximumSurface2DLayeredWidth",E,"Maximum 2D layered surface width",9,N],[13,"MaximumSurface2DLayeredHeight",E,"Maximum 2D layered surface height",9,N],[13,"MaximumSurface2DLayeredLayers",E,"Maximum layers in a 2D layered surface",9,N],[13,"MaximumSurfacecubemapWidth",E,"Maximum cubemap surface width",9,N],[13,"MaximumSurfacecubemapLayeredWidth",E,"Maximum cubemap layered surface width",9,N],[13,"MaximumSurfacecubemapLayeredLayers",E,"Maximum layers in a cubemap layered surface",9,N],[13,"MaximumTexture1DLinearWidth",E,"Maximum 1D linear texture width",9,N],[13,"MaximumTexture2DLinearWidth",E,"Maximum 2D linear texture width",9,N],[13,"MaximumTexture2DLinearHeight",E,"Maximum 2D linear texture height",9,N],[13,"MaximumTexture2DLinearPitch",E,"Maximum 2D linear texture pitch in bytes",9,N],[13,"MaximumTexture2DMipmappedWidth",E,"Maximum mipmapped 2D texture height",9,N],[13,"MaximumTexture2DMipmappedHeight",E,"Maximum mipmapped 2D texture width",9,N],[13,"ComputeCapabilityMajor",E,"Major compute capability version number",9,N],[13,"ComputeCapabilityMinor",E,"Minor compute capability version number",9,N],[13,"MaximumTexture1DMipmappedWidth",E,"Maximum mipammed 1D texture width",9,N],[13,"StreamPrioritiesSupported",E,"Device supports stream priorities",9,N],[13,"GlobalL1CacheSupported",E,"Device supports caching globals in L1",9,N],[13,"LocalL1CacheSupported",E,"Device supports caching locals in L1",9,N],[13,"MaxSharedMemoryPerMultiprocessor",E,"Maximum shared memory available per multiprocessor in bytes",9,N],[13,"MaxRegistersPerMultiprocessor",E,"Maximum number of 32-bit registers available per…",9,N],[13,"ManagedMemory",E,"Device can allocate managed memory on this system",9,N],[13,"MultiGpuBoard",E,"Device is on a multi-GPU board",9,N],[13,"MultiGpuBoardGroupId",E,"Unique ID for a group of devices on the same multi-GPU board",9,N],[13,"HostNativeAtomicSupported",E,"Link between the device and the host supports native…",9,N],[13,"SingleToDoublePrecisionPerfRatio",E,"Ratio of single precision performance (in floating-point…",9,N],[13,"PageableMemoryAccess",E,"Device supports coherently accessing pageable memory…",9,N],[13,"ConcurrentManagedAccess",E,"Device can coherently access managed memory concurrently…",9,N],[13,"ComputePreemptionSupported",E,"Device supports compute preemption",9,N],[13,"CanUseHostPointerForRegisteredMem",E,"Device can access host registered memory at the same…",9,N],[11,"num_devices",E,"Get the number of CUDA-capable devices.",10,[[],[["u32"],[R[1],["u32"]]]]],[11,R[14],E,"Get a handle to the `ordinal`'th CUDA device.",10,[[["u32"]],[[R[1],[R[9]]],[R[9]]]]],[11,R[15],E,"Return an iterator over all CUDA devices.",10,[[],[[R[15]],[R[1],[R[15]]]]]],[11,"total_memory",E,"Returns the total amount of memory available on the device…",10,[[],[["usize"],[R[1],["usize"]]]]],[11,"name",E,"Returns the name of this device.",10,[[],[["string"],[R[1],["string"]]]]],[11,R[42],E,"Returns information about this device.",10,[[[R[122]]],[["i32"],[R[1],["i32"]]]]],[0,"error",R[0],"Types for error handling",N,N],[4,R[164],R[106],"Error enum which represents all the potential errors…",N,N],[13,"InvalidValue",E,E,11,N],[13,"OutOfMemory",E,E,11,N],[13,"NotInitialized",E,E,11,N],[13,"Deinitialized",E,E,11,N],[13,"ProfilerDisabled",E,E,11,N],[13,"ProfilerNotInitialized",E,E,11,N],[13,"ProfilerAlreadyStarted",E,E,11,N],[13,"ProfilerAlreadyStopped",E,E,11,N],[13,"NoDevice",E,E,11,N],[13,"InvalidDevice",E,E,11,N],[13,"InvalidImage",E,E,11,N],[13,"InvalidContext",E,E,11,N],[13,"ContextAlreadyCurrent",E,E,11,N],[13,"MapFailed",E,E,11,N],[13,"UnmapFailed",E,E,11,N],[13,"ArrayIsMapped",E,E,11,N],[13,"AlreadyMapped",E,E,11,N],[13,"NoBinaryForGpu",E,E,11,N],[13,"AlreadyAcquired",E,E,11,N],[13,"NotMapped",E,E,11,N],[13,"NotMappedAsArray",E,E,11,N],[13,"NotMappedAsPointer",E,E,11,N],[13,"EccUncorrectable",E,E,11,N],[13,"UnsupportedLimit",E,E,11,N],[13,"ContextAlreadyInUse",E,E,11,N],[13,"PeerAccessUnsupported",E,E,11,N],[13,"InvalidPtx",E,E,11,N],[13,"InvalidGraphicsContext",E,E,11,N],[13,"NvlinkUncorrectable",E,E,11,N],[13,"InvalidSouce",E,E,11,N],[13,"FileNotFound",E,E,11,N],[13,"SharedObjectSymbolNotFound",E,E,11,N],[13,"SharedObjectInitFailed",E,E,11,N],[13,"OperatingSystemError",E,E,11,N],[13,"InvalidHandle",E,E,11,N],[13,"NotFound",E,E,11,N],[13,R[16],E,E,11,N],[13,"IllegalAddress",E,E,11,N],[13,"LaunchOutOfResources",E,E,11,N],[13,"LaunchTimeout",E,E,11,N],[13,"LaunchIncompatibleTexturing",E,E,11,N],[13,"PeerAccessAlreadyEnabled",E,E,11,N],[13,"PeerAccessNotEnabled",E,E,11,N],[13,"PrimaryContextActive",E,E,11,N],[13,"ContextIsDestroyed",E,E,11,N],[13,"AssertError",E,E,11,N],[13,"TooManyPeers",E,E,11,N],[13,"HostMemoryAlreadyRegistered",E,E,11,N],[13,"HostMemoryNotRegistered",E,E,11,N],[13,"HardwareStackError",E,E,11,N],[13,"IllegalInstruction",E,E,11,N],[13,"MisalignedAddress",E,E,11,N],[13,"InvalidAddressSpace",E,E,11,N],[13,"InvalidProgramCounter",E,E,11,N],[13,"LaunchFailed",E,E,11,N],[13,"NotPermitted",E,E,11,N],[13,"NotSupported",E,E,11,N],[13,"UnknownError",E,E,11,N],[13,"InvalidMemoryAllocation",E,E,11,N],[6,"CudaResult",E,"Result type for most CUDA functions.",N,N],[6,"DropResult",E,"Special result type for `drop` functions which includes…",N,N],[0,"event",R[0],"Events can be used to track status and dependencies, as…",N,N],[3,R[166],R[107],"Bit flags for configuring a CUDA Event.",N,N],[3,"Event",E,"An event to track work submitted to a stream.",N,N],[4,R[165],E,"Status enum that represents the current status of an event.",N,N],[13,"Ready",E,"Ready indicates that all work captured by the event has…",12,N],[13,R[16],E,"`EventStatus::NotReady` indicates that the work captured…",12,N],[18,R[88],E,"The default event creation flag.",13,N],[18,"BLOCKING_SYNC",E,"Specify that the created event should busy-wait on…",13,N],[18,"DISABLE_TIMING",E,"Specify that the created event does not need to record…",13,N],[18,"INTERPROCESS",E,"Specify that the created event may be used as an…",13,N],[11,"empty",E,R[17],13,[[],[R[19]]]],[11,"all",E,R[18],13,[[],[R[19]]]],[11,"bits",E,R[20],13,[[["self"]],["u32"]]],[11,R[21],E,R[22],13,[[["u32"]],[[R[91],[R[19]]],[R[19]]]]],[11,R[23],E,R[24],13,[[["u32"]],[R[19]]]],[11,R[25],E,R[26],13,[[["self"]],["bool"]]],[11,R[92],E,R[27],13,[[["self"]],["bool"]]],[11,R[28],E,R[29],13,[[["self"],[R[19]]],["bool"]]],[11,R[30],E,R[31],13,[[["self"],[R[19]]],["bool"]]],[11,R[93],E,R[32],13,[[["self"],[R[19]]]]],[11,R[94],E,R[33],13,[[["self"],[R[19]]]]],[11,R[95],E,R[34],13,[[["self"],[R[19]]]]],[11,"set",E,R[35],13,[[["self"],["bool"],[R[19]]]]],[11,"new",E,"Create a new event with the specified flags.",14,[[[R[19]]],[R[1]]]],[11,"record",E,"Add the event to the given stream of work. The event will…",14,[[[R[86]],["self"]],[R[1]]]],[11,"query",E,"Return whether the stream this event was recorded on (see…",14,[[["self"]],[[R[36]],[R[1],[R[36]]]]]],[11,R[37],E,"Wait for an event to complete.",14,[[["self"]],[R[1]]]],[11,"elapsed_time_f32",E,"Return the duration between two events.",14,[[["self"]],[[R[1],["f32"]],["f32"]]]],[11,"drop",E,"Destroy an `Event` returning an error.",14,[[["event"]],[["event"],[R[38],["event"]]]]],[0,R[77],R[0],"Functions and types for working with CUDA kernels.",N,N],[3,"GridSize",R[108],"Dimensions of a grid, or the number of thread blocks in a…",N,N],[12,"x",E,"Width of grid in blocks",15,N],[12,"y",E,"Height of grid in blocks",15,N],[12,"z",E,"Depth of grid in blocks",15,N],[3,R[167],E,"Dimensions of a thread block, or the number of threads in…",N,N],[12,"x",E,"X dimension of each thread block",16,N],[12,"y",E,"Y dimension of each thread block",16,N],[12,"z",E,"Z dimension of each thread block",16,N],[3,"Function",E,"Handle to a global kernel function.",N,N],[4,R[168],E,"All supported function attributes for…",N,N],[13,R[39],E,"The maximum number of threads per block, beyond which a…",17,N],[13,"SharedMemorySizeBytes",E,"The size in bytes of the statically-allocated shared…",17,N],[13,"ConstSizeBytes",E,"The size in bytes of the constant memory required by this…",17,N],[13,"LocalSizeBytes",E,"The size in bytes of local memory used by each thread of…",17,N],[13,"NumRegisters",E,"The number of registers used by each thread of this function",17,N],[13,"PtxVersion",E,"The PTX virtual architecture version for which the…",17,N],[13,"BinaryVersion",E,"The binary architecture version for which the function was…",17,N],[13,"CacheModeCa",E,"The attribute to indicate whether the function has been…",17,N],[11,"x",E,"Create a one-dimensional grid of `x` blocks",15,[[["u32"]],[R[40]]]],[11,"xy",E,"Create a two-dimensional grid of `x * y` blocks",15,[[["u32"]],[R[40]]]],[11,"xyz",E,"Create a three-dimensional grid of `x * y * z` blocks",15,[[["u32"]],[R[40]]]],[11,"x",E,"Create a one-dimensional block of `x` threads",16,[[["u32"]],[R[41]]]],[11,"xy",E,"Create a two-dimensional block of `x * y` threads",16,[[["u32"]],[R[41]]]],[11,"xyz",E,"Create a three-dimensional block of `x * y * z` threads",16,[[["u32"]],[R[41]]]],[11,R[42],E,"Returns information about a function.",18,[[[R[123]],["self"]],[["i32"],[R[1],["i32"]]]]],[11,R[43],E,"Sets the preferred cache configuration for this function.",18,[[["self"],[R[8]]],[R[1]]]],[11,R[44],E,"Sets the preferred shared memory configuration for this…",18,[[["self"],[R[11]]],[R[1]]]],[0,"memory",R[0],"Access to CUDA's memory allocation and transfer functions.",N,N],[8,"DeviceCopy",R[55],"Marker trait for types which can safely be copied to or…",N,N],[3,R[182],E,"A pointer to device memory.",N,N],[3,R[183],E,"A pointer to unified memory.",N,N],[3,R[173],E,"A pointer type for heap-allocation in CUDA device memory.",N,N],[3,R[78],E,R[79],N,N],[3,R[174],E,"Fixed-size device-side slice.",N,N],[3,R[184],E,R[45],N,N],[3,R[185],E,R[45],N,N],[3,R[175],E,"Fixed-size host-side buffer in page-locked memory.",N,N],[3,R[176],E,"A pointer type for heap-allocation in CUDA unified memory.",N,N],[3,R[80],E,R[81],N,N],[5,"cuda_malloc",E,"Unsafe wrapper around the `cuMemAlloc` function, which…",N,[[["usize"]],[[R[46]],[R[1],[R[46]]]]]],[5,"cuda_malloc_unified",E,"Unsafe wrapper around the `cuMemAllocManaged` function,…",N,[[["usize"]],[[R[47]],[R[1],[R[47]]]]]],[5,"cuda_free",E,"Free memory allocated with `cuda_malloc`.",N,[[[R[46]]],[R[1]]]],[5,"cuda_free_unified",E,"Free memory allocated with `cuda_malloc_unified`.",N,[[["devicecopy"],[R[47]]],[R[1]]]],[5,"cuda_malloc_locked",E,"Unsafe wrapper around the `cuMemAllocHost` function, which…",N,[[["usize"]],[R[1]]]],[5,"cuda_free_locked",E,"Free page-locked memory allocated with `cuda_malloc_host`.",N,[[],[R[1]]]],[0,"array",E,"Routines for allocating and using CUDA Array Objects.",N,N],[3,R[170],R[111],"Flags which modify the behavior of CUDA array creation.",N,N],[3,R[171],E,"Describes a CUDA Array",N,N],[3,R[172],E,"A CUDA Array. Can be bound to a texture or surface.",N,N],[4,R[169],E,"Describes the format used for a CUDA Array.",N,N],[13,"UnsignedInt8",E,"Unsigned 8-bit integer",19,N],[13,"UnsignedInt16",E,"Unsigned 16-bit integer",19,N],[13,"UnsignedInt32",E,"Unsigned 32-bit integer",19,N],[13,"SignedInt8",E,"Signed 8-bit integer",19,N],[13,"SignedInt16",E,"Signed 16-bit integer",19,N],[13,"SignedInt32",E,"Signed 32-bit integer",19,N],[13,"Half",E,"Half-precision floating point number",19,N],[13,"Float",E,"Single-precision floating point number",19,N],[11,R[50],E,"Creates ArrayFormat from the CUDA Driver API enum",19,[[[R[48]]],["self"]]],[11,"to_raw",E,"Converts ArrayFormat to the CUDA Driver API enum",19,[[],[R[48]]]],[18,"LAYERED",E,"Enables creation of layered CUDA arrays. When this flag is…",20,N],[18,"SURFACE_LDST",E,"Enables surface references to be bound to the CUDA array.",20,N],[18,"CUBEMAP",E,"Enables creation of cubemaps. If this flag is set, Width…",20,N],[18,"TEXTURE_GATHER",E,"Indicates that the CUDA array will be used for texture…",20,N],[11,"empty",E,R[17],20,[[],[R[49]]]],[11,"all",E,R[18],20,[[],[R[49]]]],[11,"bits",E,R[20],20,[[["self"]],[R[52]]]],[11,R[21],E,R[22],20,[[[R[52]]],[[R[91],[R[49]]],[R[49]]]]],[11,R[23],E,R[24],20,[[[R[52]]],[R[49]]]],[11,R[25],E,R[26],20,[[["self"]],["bool"]]],[11,R[92],E,R[27],20,[[["self"]],["bool"]]],[11,R[28],E,R[29],20,[[["self"],[R[49]]],["bool"]]],[11,R[30],E,R[31],20,[[["self"],[R[49]]],["bool"]]],[11,R[93],E,R[32],20,[[["self"],[R[49]]]]],[11,R[94],E,R[33],20,[[["self"],[R[49]]]]],[11,R[95],E,R[34],20,[[["self"],[R[49]]]]],[11,"set",E,R[35],20,[[["self"],["bool"],[R[49]]]]],[11,"new",E,"Creates a default flags object with no flags set.",20,[[],["self"]]],[11,R[50],E,"Constructs an ArrayDescriptor from a CUDA Driver API Array…",21,[[["cuda_array3d_descriptor"]],["self"]]],[11,"new",E,"Constructs an ArrayDescriptor from dimensions, format,…",21,[[[R[51]],[R[52]],[R[49]]],["self"]]],[11,"from_dims_format",E,"Creates a new ArrayDescriptor from a set of dimensions and…",21,[[[R[51]]],["self"]]],[11,"dims",E,"Returns the dimensions of the ArrayDescriptor",21,[[["self"]]]],[11,"set_dims",E,"Sets the dimensions of the ArrayDescriptor",21,[[["self"]]]],[11,"width",E,"Returns the width of the ArrayDescripor",21,[[["self"]],["usize"]]],[11,"set_width",E,"Sets the width of the ArrayDescriptor",21,[[["self"],["usize"]]]],[11,"height",E,"Returns the height of the ArrayDescripor",21,[[["self"]],["usize"]]],[11,"set_height",E,"Sets the height of the ArrayDescriptor",21,[[["self"],["usize"]]]],[11,"depth",E,"Returns the depth of the ArrayDescripor",21,[[["self"]],["usize"]]],[11,"set_depth",E,"Sets the depth of the ArrayDescriptor",21,[[["self"],["usize"]]]],[11,"format",E,"Returns the format of the ArrayDescripor",21,[[["self"]],[R[51]]]],[11,"set_format",E,"Sets the format of the ArrayDescriptor",21,[[["self"],[R[51]]]]],[11,"num_channels",E,"Returns the number of channels in the ArrayDescriptor",21,[[["self"]],[R[52]]]],[11,"set_num_channels",E,"Sets the number of channels in the ArrayDescriptor",21,[[["self"],[R[52]]]]],[11,"flags",E,"Returns the flags of the ArrayDescriptor",21,[[["self"]],[R[49]]]],[11,"set_flags",E,"Sets the flags of the ArrayDescriptor.",21,[[["self"],[R[49]]]]],[11,"from_descriptor",E,"Constructs a generic ArrayObject from an `ArrayDescriptor`.",22,[[[R[53]]],[R[1]]]],[11,"new",E,"Allocates a new CUDA Array that is up to 3-dimensions.",22,[[[R[51]],[R[52]]],[R[1]]]],[11,"new_1d",E,"Allocates a new 1D CUDA Array.",22,[[[R[51]],[R[52]],["usize"]],[R[1]]]],[11,"new_2d",E,"Allocates a new CUDA Array that is up to 2-dimensions.",22,[[[R[51]],[R[52]]],[R[1]]]],[11,"new_layered",E,"Creates a new Layered 1D or 2D CUDA Array.",22,[[[R[51]],[R[52]],["usize"]],[R[1]]]],[11,"new_layered_1d",E,"Creates a new Layered 1D CUDA Array.",22,[[[R[51]],[R[52]],["usize"]],[R[1]]]],[11,"new_cubemap",E,"Creates a new Cubemap CUDA Array. The array is represented…",22,[[[R[51]],[R[52]],["usize"]],[R[1]]]],[11,"new_layered_cubemap",E,"Creates a new Layered Cubemap CUDA Array. The array is…",22,[[[R[51]],[R[52]],["usize"]],[R[1]]]],[11,"descriptor",E,"Gets the descriptor associated with this array.",22,[[["self"]],[[R[53]],[R[1],[R[53]]]]]],[11,"drop",E,"Try to destroy an `ArrayObject`. Can fail - if it does,…",22,[[[R[54]]],[[R[38],[R[54]]],[R[54]]]]],[11,"new",R[55],"Allocate device memory and place val into it.",23,[[[T]],[R[1]]]],[11,R[57],E,"Allocate device memory, but do not initialize it.",23,[[],[R[1]]]],[11,"zeroed",E,"Allocate device memory and fill it with zeroes (`0u8`).",23,[[],[R[1]]]],[11,R[50],E,"Constructs a DeviceBox from a raw pointer.",23,[[],["self"]]],[11,"from_device",E,"Constructs a DeviceBox from a DevicePointer.",23,[[[R[46]]],["self"]]],[11,"into_device",E,"Consumes the DeviceBox, returning the wrapped DevicePointer.",23,[[[R[56]]],[R[46]]]],[11,R[61],E,"Returns the contained device pointer without consuming the…",23,[[["self"]],[R[46]]]],[11,"drop",E,"Destroy a `DeviceBox`, returning an error.",23,[[[R[56]]],[[R[56]],[R[38],[R[56]]]]]],[11,R[57],E,R[58],24,[[["usize"]],[R[1]]]],[11,"zeroed",E,R[58],24,[[["usize"]],[R[1]]]],[11,R[62],E,"Creates a `DeviceBuffer<T>` directly from the raw…",24,[[[R[46]],["usize"]],[R[59]]]],[11,"drop",E,"Destroy a `DeviceBuffer`, returning an error.",24,[[[R[59]]],[[R[59]],[R[38],[R[59]]]]]],[11,R[64],E,"Allocate a new device buffer of the same size as `slice`,…",24,[[],[R[1]]]],[11,"from_slice_async",E,"Asynchronously allocate a new buffer of the same size as…",24,[[[R[86]]],[R[1]]]],[11,"len",E,"Returns the number of elements in the slice.",25,[[["self"]],["usize"]]],[11,R[25],E,"Returns `true` if the slice has a length of 0.",25,[[["self"]],["bool"]]],[11,"as_ptr",E,"Return a raw device-pointer to the slice's buffer.",25,[[["self"]]]],[11,"as_mut_ptr",E,"Returns an unsafe mutable device-pointer to the slice's…",25,[[["self"]]]],[11,"split_at",E,"Divides one DeviceSlice into two at a given index.",25,[[["self"],["usize"]]]],[11,"split_at_mut",E,"Divides one mutable DeviceSlice into two at a given index.",25,[[["self"],["usize"]]]],[11,"chunks",E,R[60],25,[[["self"],["usize"]],[R[126]]]],[11,"chunks_mut",E,R[60],25,[[["self"],["usize"]],["devicechunksmut"]]],[11,R[61],E,"Returns a `DevicePointer<T>` to the buffer.",25,[[["self"]],[R[46]]]],[11,R[62],E,"Forms a slice from a `DevicePointer` and a length.",25,[[[R[46]],["usize"]],[R[63]]]],[11,"from_raw_parts_mut",E,"Performs the same functionality as `from_raw_parts`,…",25,[[[R[46]],["usize"]],[R[63]]]],[11,"new",E,R[65],26,[[[T],["usize"]],[R[1]]]],[11,R[64],E,"Allocate a new page-locked buffer of the same size as…",26,[[],[R[1]]]],[11,R[57],E,R[65],26,[[["usize"]],[R[1]]]],[11,R[69],E,R[70],26,[[["self"]]]],[11,R[71],E,R[72],26,[[["self"]]]],[11,R[62],E,"Creates a `LockedBuffer<T>` directly from the raw…",26,[[["usize"]],[R[66]]]],[11,"drop",E,"Destroy a `LockedBuffer`, returning an error.",26,[[[R[66]]],[[R[38],[R[66]]],[R[66]]]]],[11,"new",E,"Allocate unified memory and place val into it.",27,[[[T]],[R[1]]]],[11,R[57],E,"Allocate unified memory without initializing it.",27,[[],[R[1]]]],[11,R[50],E,"Constructs a UnifiedBox from a raw pointer.",27,[[],["self"]]],[11,"from_unified",E,"Constructs a UnifiedBox from a UnifiedPointer.",27,[[[R[47]]],["self"]]],[11,"into_unified",E,"Consumes the UnifiedBox, returning the wrapped…",27,[[[R[67]]],[R[47]]]],[11,R[73],E,"Returns the contained unified pointer without consuming…",27,[[["self"]],[R[47]]]],[11,"leak",E,"Consumes and leaks the UnifiedBox, returning a mutable…",27,[[[R[67]]],[T]]],[11,"drop",E,"Destroy a `UnifiedBox`, returning an error.",27,[[[R[67]]],[[R[67]],[R[38],[R[67]]]]]],[11,"new",E,R[68],28,[[[T],["usize"]],[R[1]]]],[11,R[64],E,"Allocate a new unified buffer of the same size as `slice`,…",28,[[],[R[1]]]],[11,R[57],E,R[68],28,[[["usize"]],[R[1]]]],[11,R[69],E,R[70],28,[[["self"]]]],[11,R[71],E,R[72],28,[[["self"]]]],[11,R[73],E,"Returns a `UnifiedPointer<T>` to the buffer.",28,[[["self"]],[R[47]]]],[11,R[62],E,"Creates a `UnifiedBuffer<T>` directly from the raw…",28,[[["usize"],[R[47]]],[R[74]]]],[11,"drop",E,"Destroy a `UnifiedBuffer`, returning an error.",28,[[[R[74]]],[[R[38],[R[74]]],[R[74]]]]],[8,R[82],E,R[75],N,N],[10,R[83],E,R[84],29,[[["o"],["self"]],[R[1]]]],[10,R[119],E,R[85],29,[[["o"],["self"]],[R[1]]]],[8,R[177],E,R[75],N,N],[10,R[120],E,"Asynchronously copy data from `source`. `source` must be…",30,[[[R[86]],["o"],["self"]],[R[1]]]],[10,R[121],E,"Asynchronously copy data to `dest`. `dest` must be the…",30,[[[R[86]],["o"],["self"]],[R[1]]]],[0,R[76],R[0],"Functions and types for working with CUDA modules.",N,N],[3,"Module",R[112],"A compiled CUDA module, loaded into a context.",N,N],[3,"Symbol",E,"Handle to a symbol defined within a CUDA module.",N,N],[11,"load_from_file",E,"Load a module from the given file name into the current…",31,[[["cstr"]],[[R[76]],[R[1],[R[76]]]]]],[11,"load_from_string",E,"Load a module from a CStr.",31,[[["cstr"]],[[R[76]],[R[1],[R[76]]]]]],[11,"get_global",E,"Get a reference to a global symbol, which can then be…",31,[[["cstr"],["self"]],[[R[1],["symbol"]],["symbol"]]]],[11,"get_function",E,"Get a reference to a kernel function which can then be…",31,[[["cstr"],["self"]],[[R[1],[R[77]]],[R[77]]]]],[11,"drop",E,"Destroy a `Module`, returning an error.",31,[[[R[76]]],[[R[76]],[R[38],[R[76]]]]]],[0,"prelude",R[0],"This module re-exports a number of commonly-used types for…",N,N],[3,R[78],"rustacuda::prelude",R[79],N,N],[3,R[80],E,R[81],N,N],[8,R[82],E,R[75],N,N],[10,R[83],E,R[84],29,[[["o"],["self"]],[R[1]]]],[10,R[119],E,R[85],29,[[["o"],["self"]],[R[1]]]],[0,R[86],R[0],"Streams of work for the device to perform.",N,N],[3,R[178],R[113],"Bit flags for configuring a CUDA Stream.",N,N],[3,R[179],E,"Bit flags for configuring a CUDA Stream waiting on an CUDA…",N,N],[3,"Stream",E,"A stream of work for the device to perform.",N,N],[18,R[88],E,R[89],32,N],[18,"NON_BLOCKING",E,"This stream does not synchronize with the NULL stream.",32,N],[11,"empty",E,R[17],32,[[],[R[87]]]],[11,"all",E,R[18],32,[[],[R[87]]]],[11,"bits",E,R[20],32,[[["self"]],["u32"]]],[11,R[21],E,R[22],32,[[["u32"]],[[R[87]],[R[91],[R[87]]]]]],[11,R[23],E,R[24],32,[[["u32"]],[R[87]]]],[11,R[25],E,R[26],32,[[["self"]],["bool"]]],[11,R[92],E,R[27],32,[[["self"]],["bool"]]],[11,R[28],E,R[29],32,[[[R[87]],["self"]],["bool"]]],[11,R[30],E,R[31],32,[[[R[87]],["self"]],["bool"]]],[11,R[93],E,R[32],32,[[[R[87]],["self"]]]],[11,R[94],E,R[33],32,[[[R[87]],["self"]]]],[11,R[95],E,R[34],32,[[[R[87]],["self"]]]],[11,"set",E,R[35],32,[[[R[87]],["self"],["bool"]]]],[18,R[88],E,R[89],33,N],[11,"empty",E,R[17],33,[[],[R[90]]]],[11,"all",E,R[18],33,[[],[R[90]]]],[11,"bits",E,R[20],33,[[["self"]],["u32"]]],[11,R[21],E,R[22],33,[[["u32"]],[[R[90]],[R[91],[R[90]]]]]],[11,R[23],E,R[24],33,[[["u32"]],[R[90]]]],[11,R[25],E,R[26],33,[[["self"]],["bool"]]],[11,R[92],E,R[27],33,[[["self"]],["bool"]]],[11,R[28],E,R[29],33,[[[R[90]],["self"]],["bool"]]],[11,R[30],E,R[31],33,[[[R[90]],["self"]],["bool"]]],[11,R[93],E,R[32],33,[[["self"],[R[90]]]]],[11,R[94],E,R[33],33,[[["self"],[R[90]]]]],[11,R[95],E,R[34],33,[[["self"],[R[90]]]]],[11,"set",E,R[35],33,[[["self"],[R[90]],["bool"]]]],[11,"new",E,"Create a new stream with the given flags and optional…",34,[[["i32"],[R[87]],[R[91],["i32"]]],[R[1]]]],[11,R[96],E,"Return the flags which were used to create this stream.",34,[[["self"]],[[R[87]],[R[1],[R[87]]]]]],[11,"get_priority",E,"Return the priority of this stream.",34,[[["self"]],[["i32"],[R[1],["i32"]]]]],[11,"add_callback",E,"Add a callback to a stream.",34,[[["self"],["box"]],[R[1]]]],[11,R[37],E,"Wait until a stream's tasks are completed.",34,[[["self"]],[R[1]]]],[11,"wait_event",E,"Make the stream wait on an event.",34,[[["event"],[R[90]],["self"]],[R[1]]]],[11,"drop",E,"Destroy a `Stream`, returning an error.",34,[[[R[86]]],[[R[38],[R[86]]],[R[86]]]]],[11,"empty",R[0],R[17],35,[[],[R[97]]]],[11,"all",E,R[18],35,[[],[R[97]]]],[11,"bits",E,R[20],35,[[["self"]],["u32"]]],[11,R[21],E,R[22],35,[[["u32"]],[[R[91],[R[97]]],[R[97]]]]],[11,R[23],E,R[24],35,[[["u32"]],[R[97]]]],[11,R[25],E,R[26],35,[[["self"]],["bool"]]],[11,R[92],E,R[27],35,[[["self"]],["bool"]]],[11,R[28],E,R[29],35,[[["self"],[R[97]]],["bool"]]],[11,R[30],E,R[31],35,[[["self"],[R[97]]],["bool"]]],[11,R[93],E,R[32],35,[[["self"],[R[97]]]]],[11,R[94],E,R[33],35,[[["self"],[R[97]]]]],[11,R[95],E,R[34],35,[[["self"],[R[97]]]]],[11,"set",E,R[35],35,[[["self"],[R[97]],["bool"]]]],[11,"get",E,"Returns the latest CUDA version supported by the CUDA…",36,[[],[[R[4]],[R[1],[R[4]]]]]],[11,"major",E,"Return the major version number - eg. the 9 in version 9.2",36,[[],["i32"]]],[11,"minor",E,"Return the minor version number - eg. the 2 in version 9.2",36,[[],["i32"]]],[14,"launch",E,"Launch a kernel function asynchronously.",N,N],[11,"from",E,E,35,[[[T]],[T]]],[11,"into",E,E,35,[[],[U]]],[11,R[98],E,E,35,[[["self"]],[T]]],[11,R[99],E,E,35,[[[T],["self"]]]],[11,R[102],E,E,35,[[[U]],["result"]]],[11,"borrow",E,E,35,[[["self"]],[T]]],[11,R[104],E,E,35,[[["self"]],["typeid"]]],[11,R[100],E,E,35,[[["self"]],[T]]],[11,R[103],E,E,35,[[],["result"]]],[11,"from",E,E,36,[[[T]],[T]]],[11,"into",E,E,36,[[],[U]]],[11,R[98],E,E,36,[[["self"]],[T]]],[11,R[99],E,E,36,[[[T],["self"]]]],[11,R[102],E,E,36,[[[U]],["result"]]],[11,"borrow",E,E,36,[[["self"]],[T]]],[11,R[104],E,E,36,[[["self"]],["typeid"]]],[11,R[100],E,E,36,[[["self"]],[T]]],[11,R[103],E,E,36,[[],["result"]]],[11,"from",R[101],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[98],E,E,4,[[["self"]],[T]]],[11,R[99],E,E,4,[[[T],["self"]]]],[11,R[102],E,E,4,[[[U]],["result"]]],[11,"borrow",E,E,4,[[["self"]],[T]]],[11,R[104],E,E,4,[[["self"]],["typeid"]]],[11,R[100],E,E,4,[[["self"]],[T]]],[11,R[103],E,E,4,[[],["result"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[102],E,E,5,[[[U]],["result"]]],[11,"borrow",E,E,5,[[["self"]],[T]]],[11,R[104],E,E,5,[[["self"]],["typeid"]]],[11,R[100],E,E,5,[[["self"]],[T]]],[11,R[103],E,E,5,[[],["result"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[98],E,E,6,[[["self"]],[T]]],[11,R[99],E,E,6,[[[T],["self"]]]],[11,R[102],E,E,6,[[[U]],["result"]]],[11,"borrow",E,E,6,[[["self"]],[T]]],[11,R[104],E,E,6,[[["self"]],["typeid"]]],[11,R[100],E,E,6,[[["self"]],[T]]],[11,R[103],E,E,6,[[],["result"]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[102],E,E,7,[[[U]],["result"]]],[11,"borrow",E,E,7,[[["self"]],[T]]],[11,R[104],E,E,7,[[["self"]],["typeid"]]],[11,R[100],E,E,7,[[["self"]],[T]]],[11,R[103],E,E,7,[[],["result"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[98],E,E,0,[[["self"]],[T]]],[11,R[99],E,E,0,[[[T],["self"]]]],[11,R[102],E,E,0,[[[U]],["result"]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[104],E,E,0,[[["self"]],["typeid"]]],[11,R[100],E,E,0,[[["self"]],[T]]],[11,R[103],E,E,0,[[],["result"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[102],E,E,8,[[[U]],["result"]]],[11,"borrow",E,E,8,[[["self"]],[T]]],[11,R[104],E,E,8,[[["self"]],["typeid"]]],[11,R[100],E,E,8,[[["self"]],[T]]],[11,R[103],E,E,8,[[],["result"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[98],E,E,1,[[["self"]],[T]]],[11,R[99],E,E,1,[[[T],["self"]]]],[11,R[102],E,E,1,[[[U]],["result"]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[104],E,E,1,[[["self"]],["typeid"]]],[11,R[100],E,E,1,[[["self"]],[T]]],[11,R[103],E,E,1,[[],["result"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[98],E,E,2,[[["self"]],[T]]],[11,R[99],E,E,2,[[[T],["self"]]]],[11,R[102],E,E,2,[[[U]],["result"]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[104],E,E,2,[[["self"]],["typeid"]]],[11,R[100],E,E,2,[[["self"]],[T]]],[11,R[103],E,E,2,[[],["result"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[98],E,E,3,[[["self"]],[T]]],[11,R[99],E,E,3,[[[T],["self"]]]],[11,R[102],E,E,3,[[[U]],["result"]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[104],E,E,3,[[["self"]],["typeid"]]],[11,R[100],E,E,3,[[["self"]],[T]]],[11,R[103],E,E,3,[[],["result"]]],[11,"from",R[105],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[98],E,E,10,[[["self"]],[T]]],[11,R[99],E,E,10,[[[T],["self"]]]],[11,R[102],E,E,10,[[[U]],["result"]]],[11,"borrow",E,E,10,[[["self"]],[T]]],[11,R[104],E,E,10,[[["self"]],["typeid"]]],[11,R[100],E,E,10,[[["self"]],[T]]],[11,R[103],E,E,10,[[],["result"]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[109],E,E,37,[[],["i"]]],[11,"into",E,E,37,[[],[U]]],[11,R[98],E,E,37,[[["self"]],[T]]],[11,R[99],E,E,37,[[[T],["self"]]]],[11,R[102],E,E,37,[[[U]],["result"]]],[11,"borrow",E,E,37,[[["self"]],[T]]],[11,R[104],E,E,37,[[["self"]],["typeid"]]],[11,R[100],E,E,37,[[["self"]],[T]]],[11,R[103],E,E,37,[[],["result"]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[98],E,E,9,[[["self"]],[T]]],[11,R[99],E,E,9,[[[T],["self"]]]],[11,R[102],E,E,9,[[[U]],["result"]]],[11,"borrow",E,E,9,[[["self"]],[T]]],[11,R[104],E,E,9,[[["self"]],["typeid"]]],[11,R[100],E,E,9,[[["self"]],[T]]],[11,R[103],E,E,9,[[],["result"]]],[11,"from",R[106],E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[98],E,E,11,[[["self"]],[T]]],[11,R[99],E,E,11,[[[T],["self"]]]],[11,R[110],E,E,11,[[["self"]],["string"]]],[11,R[102],E,E,11,[[[U]],["result"]]],[11,"borrow",E,E,11,[[["self"]],[T]]],[11,R[104],E,E,11,[[["self"]],["typeid"]]],[11,R[100],E,E,11,[[["self"]],[T]]],[11,R[103],E,E,11,[[],["result"]]],[11,"from",R[107],E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[98],E,E,13,[[["self"]],[T]]],[11,R[99],E,E,13,[[[T],["self"]]]],[11,R[102],E,E,13,[[[U]],["result"]]],[11,"borrow",E,E,13,[[["self"]],[T]]],[11,R[104],E,E,13,[[["self"]],["typeid"]]],[11,R[100],E,E,13,[[["self"]],[T]]],[11,R[103],E,E,13,[[],["result"]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[102],E,E,14,[[[U]],["result"]]],[11,"borrow",E,E,14,[[["self"]],[T]]],[11,R[104],E,E,14,[[["self"]],["typeid"]]],[11,R[100],E,E,14,[[["self"]],[T]]],[11,R[103],E,E,14,[[],["result"]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[98],E,E,12,[[["self"]],[T]]],[11,R[99],E,E,12,[[[T],["self"]]]],[11,R[102],E,E,12,[[[U]],["result"]]],[11,"borrow",E,E,12,[[["self"]],[T]]],[11,R[104],E,E,12,[[["self"]],["typeid"]]],[11,R[100],E,E,12,[[["self"]],[T]]],[11,R[103],E,E,12,[[],["result"]]],[11,"from",R[108],E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[98],E,E,15,[[["self"]],[T]]],[11,R[99],E,E,15,[[[T],["self"]]]],[11,R[102],E,E,15,[[[U]],["result"]]],[11,"borrow",E,E,15,[[["self"]],[T]]],[11,R[104],E,E,15,[[["self"]],["typeid"]]],[11,R[100],E,E,15,[[["self"]],[T]]],[11,R[103],E,E,15,[[],["result"]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[98],E,E,16,[[["self"]],[T]]],[11,R[99],E,E,16,[[[T],["self"]]]],[11,R[102],E,E,16,[[[U]],["result"]]],[11,"borrow",E,E,16,[[["self"]],[T]]],[11,R[104],E,E,16,[[["self"]],["typeid"]]],[11,R[100],E,E,16,[[["self"]],[T]]],[11,R[103],E,E,16,[[],["result"]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[102],E,E,18,[[[U]],["result"]]],[11,"borrow",E,E,18,[[["self"]],[T]]],[11,R[104],E,E,18,[[["self"]],["typeid"]]],[11,R[100],E,E,18,[[["self"]],[T]]],[11,R[103],E,E,18,[[],["result"]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[98],E,E,17,[[["self"]],[T]]],[11,R[99],E,E,17,[[[T],["self"]]]],[11,R[102],E,E,17,[[[U]],["result"]]],[11,"borrow",E,E,17,[[["self"]],[T]]],[11,R[104],E,E,17,[[["self"]],["typeid"]]],[11,R[100],E,E,17,[[["self"]],[T]]],[11,R[103],E,E,17,[[],["result"]]],[11,"from",R[55],E,38,[[[T]],[T]]],[11,"into",E,E,38,[[],[U]]],[11,R[98],E,E,38,[[["self"]],[T]]],[11,R[99],E,E,38,[[[T],["self"]]]],[11,R[102],E,E,38,[[[U]],["result"]]],[11,"borrow",E,E,38,[[["self"]],[T]]],[11,R[104],E,E,38,[[["self"]],["typeid"]]],[11,R[100],E,E,38,[[["self"]],[T]]],[11,R[103],E,E,38,[[],["result"]]],[11,"from",E,E,39,[[[T]],[T]]],[11,"into",E,E,39,[[],[U]]],[11,R[98],E,E,39,[[["self"]],[T]]],[11,R[99],E,E,39,[[[T],["self"]]]],[11,R[102],E,E,39,[[[U]],["result"]]],[11,"borrow",E,E,39,[[["self"]],[T]]],[11,R[104],E,E,39,[[["self"]],["typeid"]]],[11,R[100],E,E,39,[[["self"]],[T]]],[11,R[103],E,E,39,[[],["result"]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[102],E,E,23,[[[U]],["result"]]],[11,"borrow",E,E,23,[[["self"]],[T]]],[11,R[104],E,E,23,[[["self"]],["typeid"]]],[11,R[100],E,E,23,[[["self"]],[T]]],[11,R[103],E,E,23,[[],["result"]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[],[U]]],[11,R[102],E,E,24,[[[U]],["result"]]],[11,"borrow",E,E,24,[[["self"]],[T]]],[11,R[104],E,E,24,[[["self"]],["typeid"]]],[11,R[100],E,E,24,[[["self"]],[T]]],[11,R[103],E,E,24,[[],["result"]]],[11,"borrow",E,E,25,[[["self"]],[T]]],[11,R[104],E,E,25,[[["self"]],["typeid"]]],[11,R[100],E,E,25,[[["self"]],[T]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[109],E,E,40,[[],["i"]]],[11,"into",E,E,40,[[],[U]]],[11,R[98],E,E,40,[[["self"]],[T]]],[11,R[99],E,E,40,[[[T],["self"]]]],[11,R[102],E,E,40,[[[U]],["result"]]],[11,"borrow",E,E,40,[[["self"]],[T]]],[11,R[104],E,E,40,[[["self"]],["typeid"]]],[11,R[100],E,E,40,[[["self"]],[T]]],[11,R[103],E,E,40,[[],["result"]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[109],E,E,41,[[],["i"]]],[11,"into",E,E,41,[[],[U]]],[11,R[102],E,E,41,[[[U]],["result"]]],[11,"borrow",E,E,41,[[["self"]],[T]]],[11,R[104],E,E,41,[[["self"]],["typeid"]]],[11,R[100],E,E,41,[[["self"]],[T]]],[11,R[103],E,E,41,[[],["result"]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[],[U]]],[11,R[102],E,E,26,[[[U]],["result"]]],[11,"borrow",E,E,26,[[["self"]],[T]]],[11,R[104],E,E,26,[[["self"]],["typeid"]]],[11,R[100],E,E,26,[[["self"]],[T]]],[11,R[103],E,E,26,[[],["result"]]],[11,"from",E,E,27,[[[T]],[T]]],[11,"into",E,E,27,[[],[U]]],[11,R[110],E,E,27,[[["self"]],["string"]]],[11,R[102],E,E,27,[[[U]],["result"]]],[11,"borrow",E,E,27,[[["self"]],[T]]],[11,R[104],E,E,27,[[["self"]],["typeid"]]],[11,R[100],E,E,27,[[["self"]],[T]]],[11,R[103],E,E,27,[[],["result"]]],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[],[U]]],[11,R[102],E,E,28,[[[U]],["result"]]],[11,"borrow",E,E,28,[[["self"]],[T]]],[11,R[104],E,E,28,[[["self"]],["typeid"]]],[11,R[100],E,E,28,[[["self"]],[T]]],[11,R[103],E,E,28,[[],["result"]]],[11,"from",R[111],E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[98],E,E,20,[[["self"]],[T]]],[11,R[99],E,E,20,[[[T],["self"]]]],[11,R[102],E,E,20,[[[U]],["result"]]],[11,"borrow",E,E,20,[[["self"]],[T]]],[11,R[104],E,E,20,[[["self"]],["typeid"]]],[11,R[100],E,E,20,[[["self"]],[T]]],[11,R[103],E,E,20,[[],["result"]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[98],E,E,21,[[["self"]],[T]]],[11,R[99],E,E,21,[[[T],["self"]]]],[11,R[102],E,E,21,[[[U]],["result"]]],[11,"borrow",E,E,21,[[["self"]],[T]]],[11,R[104],E,E,21,[[["self"]],["typeid"]]],[11,R[100],E,E,21,[[["self"]],[T]]],[11,R[103],E,E,21,[[],["result"]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[102],E,E,22,[[[U]],["result"]]],[11,"borrow",E,E,22,[[["self"]],[T]]],[11,R[104],E,E,22,[[["self"]],["typeid"]]],[11,R[100],E,E,22,[[["self"]],[T]]],[11,R[103],E,E,22,[[],["result"]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[98],E,E,19,[[["self"]],[T]]],[11,R[99],E,E,19,[[[T],["self"]]]],[11,R[102],E,E,19,[[[U]],["result"]]],[11,"borrow",E,E,19,[[["self"]],[T]]],[11,R[104],E,E,19,[[["self"]],["typeid"]]],[11,R[100],E,E,19,[[["self"]],[T]]],[11,R[103],E,E,19,[[],["result"]]],[11,"from",R[112],E,31,[[[T]],[T]]],[11,"into",E,E,31,[[],[U]]],[11,R[102],E,E,31,[[[U]],["result"]]],[11,"borrow",E,E,31,[[["self"]],[T]]],[11,R[104],E,E,31,[[["self"]],["typeid"]]],[11,R[100],E,E,31,[[["self"]],[T]]],[11,R[103],E,E,31,[[],["result"]]],[11,"from",E,E,42,[[[T]],[T]]],[11,"into",E,E,42,[[],[U]]],[11,R[102],E,E,42,[[[U]],["result"]]],[11,"borrow",E,E,42,[[["self"]],[T]]],[11,R[104],E,E,42,[[["self"]],["typeid"]]],[11,R[100],E,E,42,[[["self"]],[T]]],[11,R[103],E,E,42,[[],["result"]]],[11,"from",R[113],E,32,[[[T]],[T]]],[11,"into",E,E,32,[[],[U]]],[11,R[98],E,E,32,[[["self"]],[T]]],[11,R[99],E,E,32,[[[T],["self"]]]],[11,R[102],E,E,32,[[[U]],["result"]]],[11,"borrow",E,E,32,[[["self"]],[T]]],[11,R[104],E,E,32,[[["self"]],["typeid"]]],[11,R[100],E,E,32,[[["self"]],[T]]],[11,R[103],E,E,32,[[],["result"]]],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[],[U]]],[11,R[98],E,E,33,[[["self"]],[T]]],[11,R[99],E,E,33,[[[T],["self"]]]],[11,R[102],E,E,33,[[[U]],["result"]]],[11,"borrow",E,E,33,[[["self"]],[T]]],[11,R[104],E,E,33,[[["self"]],["typeid"]]],[11,R[100],E,E,33,[[["self"]],[T]]],[11,R[103],E,E,33,[[],["result"]]],[11,"from",E,E,34,[[[T]],[T]]],[11,"into",E,E,34,[[],[U]]],[11,R[102],E,E,34,[[[U]],["result"]]],[11,"borrow",E,E,34,[[["self"]],[T]]],[11,R[104],E,E,34,[[["self"]],["typeid"]]],[11,R[100],E,E,34,[[["self"]],[T]]],[11,R[103],E,E,34,[[],["result"]]],[11,R[114],R[55],E,39,[[["self"],[R[47]]],[[R[115]],[R[91],[R[115]]]]]],[11,"lt",E,E,39,[[["self"],[R[47]]],["bool"]]],[11,"le",E,E,39,[[["self"],[R[47]]],["bool"]]],[11,"gt",E,E,39,[[["self"],[R[47]]],["bool"]]],[11,"ge",E,E,39,[[["self"],[R[47]]],["bool"]]],[11,R[114],E,E,38,[[[R[46]],["self"]],[[R[115]],[R[91],[R[115]]]]]],[11,"lt",E,E,38,[[[R[46]],["self"]],["bool"]]],[11,"le",E,E,38,[[[R[46]],["self"]],["bool"]]],[11,"gt",E,E,38,[[[R[46]],["self"]],["bool"]]],[11,"ge",E,E,38,[[[R[46]],["self"]],["bool"]]],[11,"clone",E,E,38,[[["self"]],[R[46]]]],[11,"clone",E,E,39,[[["self"]],[R[47]]]],[11,"cmp",E,E,38,[[[R[46]],["self"]],[R[115]]]],[11,"cmp",E,E,39,[[["self"],[R[47]]],[R[115]]]],[11,"hash",E,E,38,[[["self"],["__ht"]]]],[11,"hash",E,E,39,[[["self"],["__ht"]]]],[11,"fmt",E,E,38,[[[R[116]],["self"]],[["error"],["result",["error"]]]]],[11,"fmt",E,E,39,[[[R[116]],["self"]],[["error"],["result",["error"]]]]],[11,"eq",E,E,39,[[["self"],[R[47]]],["bool"]]],[11,"ne",E,E,39,[[["self"],[R[47]]],["bool"]]],[11,"eq",E,E,38,[[[R[46]],["self"]],["bool"]]],[11,"ne",E,E,38,[[[R[46]],["self"]],["bool"]]],[11,"fmt",E,E,38,[[[R[116]],["self"]],[["error"],["result",["error"]]]]],[11,"fmt",E,E,39,[[[R[116]],["self"]],[["error"],["result",["error"]]]]],[11,R[117],R[101],E,5,[[["self"]],[R[118]]]],[11,R[117],E,E,6,[[["self"]],[R[118]]]],[11,R[83],R[55],E,23,[[["self"],[T]],[R[1]]]],[11,R[119],E,E,23,[[[T],["self"]],[R[1]]]],[11,R[83],E,E,23,[[["self"],[R[56]]],[R[1]]]],[11,R[119],E,E,23,[[[R[56]],["self"]],[R[1]]]],[11,R[83],E,E,25,[[["i"],["self"]],[R[1]]]],[11,R[119],E,E,25,[[["self"],["i"]],[R[1]]]],[11,R[83],E,E,25,[[[R[63]],["self"]],[R[1]]]],[11,R[119],E,E,25,[[["self"],[R[63]]],[R[1]]]],[11,R[83],E,E,25,[[["self"],[R[59]]],[R[1]]]],[11,R[119],E,E,25,[[[R[59]],["self"]],[R[1]]]],[11,R[83],R[112],E,42,[[["self"],[T]],[R[1]]]],[11,R[119],E,E,42,[[[T],["self"]],[R[1]]]],[11,R[120],R[55],E,23,[[[R[86]],["self"],[R[56]]],[R[1]]]],[11,R[121],E,E,23,[[[R[86]],[R[56]],["self"]],[R[1]]]],[11,R[120],E,E,25,[[["i"],[R[86]],["self"]],[R[1]]]],[11,R[121],E,E,25,[[[R[86]],["self"],["i"]],[R[1]]]],[11,R[120],E,E,25,[[[R[63]],[R[86]],["self"]],[R[1]]]],[11,R[121],E,E,25,[[[R[86]],["self"],[R[63]]],[R[1]]]],[11,R[120],E,E,25,[[[R[86]],["self"],[R[59]]],[R[1]]]],[11,R[121],E,E,25,[[[R[86]],[R[59]],["self"]],[R[1]]]],[11,"eq",R[101],E,1,[[[R[8]],["self"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[13]]],["bool"]]],[11,"eq",E,E,3,[[[R[11]],["self"]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[3]]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[12]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[12]]],["bool"]]],[11,"eq",R[105],E,9,[[["self"],[R[122]]],["bool"]]],[11,"eq",E,E,10,[[[R[9]],["self"]],["bool"]]],[11,"ne",E,E,10,[[[R[9]],["self"]],["bool"]]],[11,"eq",R[106],E,11,[[[R[125]],["self"]],["bool"]]],[11,"eq",R[107],E,13,[[[R[19]],["self"]],["bool"]]],[11,"ne",E,E,13,[[[R[19]],["self"]],["bool"]]],[11,"eq",E,E,12,[[["self"],[R[36]]],["bool"]]],[11,"eq",R[108],E,15,[[[R[40]],["self"]],["bool"]]],[11,"ne",E,E,15,[[[R[40]],["self"]],["bool"]]],[11,"eq",E,E,16,[[[R[41]],["self"]],["bool"]]],[11,"ne",E,E,16,[[[R[41]],["self"]],["bool"]]],[11,"eq",E,E,17,[[[R[123]],["self"]],["bool"]]],[11,"eq",R[111],E,19,[[[R[51]],["self"]],["bool"]]],[11,"eq",E,E,20,[[[R[49]],["self"]],["bool"]]],[11,"ne",E,E,20,[[[R[49]],["self"]],["bool"]]],[11,"eq",R[55],E,27,[[[R[67]],["self"]],["bool"]]],[11,"eq",R[113],E,32,[[[R[87]],["self"]],["bool"]]],[11,"ne",E,E,32,[[[R[87]],["self"]],["bool"]]],[11,"eq",E,E,33,[[["self"],[R[90]]],["bool"]]],[11,"ne",E,E,33,[[["self"],[R[90]]],["bool"]]],[11,"eq",R[0],E,35,[[["self"],[R[97]]],["bool"]]],[11,"ne",E,E,35,[[["self"],[R[97]]],["bool"]]],[11,"eq",E,E,36,[[[R[4]],["self"]],["bool"]]],[11,"ne",E,E,36,[[[R[4]],["self"]],["bool"]]],[11,R[124],R[55],E,40,[[["self"]],[[R[91],[R[63]]],[R[63]]]]],[11,R[124],E,E,41,[[["self"]],[[R[91],[R[63]]],[R[63]]]]],[11,"clone",R[101],E,1,[[["self"]],[R[8]]]],[11,"clone",E,E,2,[[["self"]],[R[13]]]],[11,"clone",E,E,3,[[["self"]],[R[11]]]],[11,"clone",E,E,4,[[["self"]],[R[3]]]],[11,"clone",E,E,6,[[["self"]],[R[7]]]],[11,"clone",E,E,0,[[["self"]],[R[12]]]],[11,"clone",R[105],E,9,[[["self"]],[R[122]]]],[11,"clone",E,E,10,[[["self"]],[R[9]]]],[11,"clone",E,E,37,[[["self"]],[R[15]]]],[11,"clone",R[106],E,11,[[["self"]],[R[125]]]],[11,"clone",R[107],E,13,[[["self"]],[R[19]]]],[11,"clone",E,E,12,[[["self"]],[R[36]]]],[11,"clone",R[108],E,15,[[["self"]],[R[40]]]],[11,"clone",E,E,16,[[["self"]],[R[41]]]],[11,"clone",E,E,17,[[["self"]],[R[123]]]],[11,"clone",R[111],E,19,[[["self"]],[R[51]]]],[11,"clone",E,E,20,[[["self"]],[R[49]]]],[11,"clone",E,E,21,[[["self"]],[R[53]]]],[11,"clone",R[55],E,40,[[["self"]],[R[126]]]],[11,"clone",R[113],E,32,[[["self"]],[R[87]]]],[11,"clone",E,E,33,[[["self"]],[R[90]]]],[11,"clone",R[0],E,35,[[["self"]],[R[97]]]],[11,"clone",E,E,36,[[["self"]],[R[4]]]],[11,"cmp",R[101],E,4,[[["self"],[R[3]]],[R[115]]]],[11,"cmp",R[107],E,13,[[[R[19]],["self"]],[R[115]]]],[11,"cmp",R[111],E,20,[[[R[49]],["self"]],[R[115]]]],[11,"cmp",R[55],E,27,[[[R[67]],["self"]],[R[115]]]],[11,"cmp",R[113],E,32,[[[R[87]],["self"]],[R[115]]]],[11,"cmp",E,E,33,[[["self"],[R[90]]],[R[115]]]],[11,"cmp",R[0],E,35,[[["self"],[R[97]]],[R[115]]]],[11,"cmp",E,E,36,[[[R[4]],["self"]],[R[115]]]],[11,"from",R[108],E,15,[[["u32"]],[R[40]]]],[11,"from",E,E,15,[[],[R[40]]]],[11,"from",E,E,15,[[],[R[40]]]],[11,"from",E,E,15,[[[R[40]]],[R[40]]]],[11,"from",E,E,16,[[["u32"]],[R[41]]]],[11,"from",E,E,16,[[],[R[41]]]],[11,"from",E,E,16,[[],[R[41]]]],[11,"from",E,E,16,[[[R[41]]],[R[41]]]],[11,"extend",R[101],E,4,[[["self"],[R[127]]]]],[11,"extend",R[107],E,13,[[["self"],[R[127]]]]],[11,"extend",R[111],E,20,[[["self"],[R[127]]]]],[11,"extend",R[113],E,32,[[["self"],[R[127]]]]],[11,"extend",E,E,33,[[["self"],[R[127]]]]],[11,"extend",R[0],E,35,[[["self"],[R[127]]]]],[11,"drop",R[101],E,5,[[["self"]]]],[11,"drop",R[107],E,14,[[["self"]]]],[11,"drop",R[111],E,22,[[["self"]]]],[11,"drop",R[55],E,23,[[["self"]]]],[11,"drop",E,E,24,[[["self"]]]],[11,"drop",E,E,26,[[["self"]]]],[11,"drop",E,E,27,[[["self"]]]],[11,"drop",E,E,28,[[["self"]]]],[11,"drop",R[112],E,31,[[["self"]]]],[11,"drop",R[113],E,34,[[["self"]]]],[11,R[114],R[101],E,4,[[["self"],[R[3]]],[[R[115]],[R[91],[R[115]]]]]],[11,"lt",E,E,4,[[["self"],[R[3]]],["bool"]]],[11,"le",E,E,4,[[["self"],[R[3]]],["bool"]]],[11,"gt",E,E,4,[[["self"],[R[3]]],["bool"]]],[11,"ge",E,E,4,[[["self"],[R[3]]],["bool"]]],[11,R[114],R[107],E,13,[[[R[19]],["self"]],[[R[115]],[R[91],[R[115]]]]]],[11,"lt",E,E,13,[[[R[19]],["self"]],["bool"]]],[11,"le",E,E,13,[[[R[19]],["self"]],["bool"]]],[11,"gt",E,E,13,[[[R[19]],["self"]],["bool"]]],[11,"ge",E,E,13,[[[R[19]],["self"]],["bool"]]],[11,R[114],R[111],E,20,[[[R[49]],["self"]],[[R[115]],[R[91],[R[115]]]]]],[11,"lt",E,E,20,[[[R[49]],["self"]],["bool"]]],[11,"le",E,E,20,[[[R[49]],["self"]],["bool"]]],[11,"gt",E,E,20,[[[R[49]],["self"]],["bool"]]],[11,"ge",E,E,20,[[[R[49]],["self"]],["bool"]]],[11,R[114],R[55],E,27,[[[R[67]],["self"]],[[R[91],[R[115]]],[R[115]]]]],[11,"lt",E,E,27,[[[R[67]],["self"]],["bool"]]],[11,"le",E,E,27,[[[R[67]],["self"]],["bool"]]],[11,"ge",E,E,27,[[[R[67]],["self"]],["bool"]]],[11,"gt",E,E,27,[[[R[67]],["self"]],["bool"]]],[11,R[114],R[113],E,32,[[[R[87]],["self"]],[[R[115]],[R[91],[R[115]]]]]],[11,"lt",E,E,32,[[[R[87]],["self"]],["bool"]]],[11,"le",E,E,32,[[[R[87]],["self"]],["bool"]]],[11,"gt",E,E,32,[[[R[87]],["self"]],["bool"]]],[11,"ge",E,E,32,[[[R[87]],["self"]],["bool"]]],[11,R[114],E,E,33,[[["self"],[R[90]]],[[R[115]],[R[91],[R[115]]]]]],[11,"lt",E,E,33,[[["self"],[R[90]]],["bool"]]],[11,"le",E,E,33,[[["self"],[R[90]]],["bool"]]],[11,"gt",E,E,33,[[["self"],[R[90]]],["bool"]]],[11,"ge",E,E,33,[[["self"],[R[90]]],["bool"]]],[11,R[114],R[0],E,35,[[["self"],[R[97]]],[[R[115]],[R[91],[R[115]]]]]],[11,"lt",E,E,35,[[["self"],[R[97]]],["bool"]]],[11,"le",E,E,35,[[["self"],[R[97]]],["bool"]]],[11,"gt",E,E,35,[[["self"],[R[97]]],["bool"]]],[11,"ge",E,E,35,[[["self"],[R[97]]],["bool"]]],[11,R[114],E,E,36,[[[R[4]],["self"]],[[R[115]],[R[91],[R[115]]]]]],[11,"lt",E,E,36,[[[R[4]],["self"]],["bool"]]],[11,"le",E,E,36,[[[R[4]],["self"]],["bool"]]],[11,"gt",E,E,36,[[[R[4]],["self"]],["bool"]]],[11,"ge",E,E,36,[[[R[4]],["self"]],["bool"]]],[11,"as_mut",R[55],E,26,[[["self"]]]],[11,"as_mut",E,E,27,[[["self"]],[T]]],[11,"as_mut",E,E,28,[[["self"]]]],[11,"next",R[105],E,37,[[["self"]],[[R[91],[R[1]]],[R[1],[R[9]]]]]],[11,"next",R[55],E,40,[[["self"]],[[R[91],[R[63]]],[R[63]]]]],[11,R[128],E,E,40,[[["self"]]]],[11,"count",E,E,40,[[],["usize"]]],[11,"nth",E,E,40,[[["self"],["usize"]],[R[91]]]],[11,"last",E,E,40,[[],[R[91]]]],[11,"next",E,E,41,[[["self"]],[[R[91],[R[63]]],[R[63]]]]],[11,R[128],E,E,41,[[["self"]]]],[11,"count",E,E,41,[[],["usize"]]],[11,"nth",E,E,41,[[["self"],["usize"]],[R[91]]]],[11,"last",E,E,41,[[],[R[91]]]],[11,"as_ref",E,E,26,[[["self"]]]],[11,"as_ref",E,E,27,[[["self"]],[T]]],[11,"as_ref",E,E,28,[[["self"]]]],[11,"default",R[111],E,20,[[],[R[49]]]],[11,R[129],R[55],E,24,[[["self"]],[R[63]]]],[11,R[129],E,E,26,[[["self"]]]],[11,R[129],E,E,27,[[["self"]],[T]]],[11,R[129],E,E,28,[[["self"]]]],[11,"fmt",R[101],E,1,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,2,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,3,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,4,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,5,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,6,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,7,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,0,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,8,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[105],E,9,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,10,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,37,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[106],E,11,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[107],E,13,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,12,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,14,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[108],E,15,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,16,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,17,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,18,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[111],E,19,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,20,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,21,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,22,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[55],E,23,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,24,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,25,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,40,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,41,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,26,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,27,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,28,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[112],E,31,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,42,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[113],E,32,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,33,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,34,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[0],E,35,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,36,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[106],E,11,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[55],E,27,[[[R[116]],["self"]],["result"]]],[11,"hash",R[101],E,1,[[["self"],["__h"]]]],[11,"hash",E,E,2,[[["self"],["__h"]]]],[11,"hash",E,E,3,[[["self"],["__h"]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",R[105],E,9,[[["self"],["__h"]]]],[11,"hash",E,E,10,[[["self"],["__h"]]]],[11,"hash",R[107],E,13,[[["self"],["__h"]]]],[11,"hash",R[108],E,17,[[["self"],["__h"]]]],[11,"hash",R[111],E,20,[[["self"],["__h"]]]],[11,"hash",R[55],E,27,[[["h"],["self"]]]],[11,"hash",R[113],E,32,[[["self"],["__h"]]]],[11,"hash",E,E,33,[[["self"],["__h"]]]],[11,"hash",R[0],E,35,[[["self"],["__h"]]]],[11,"hash",E,E,36,[[["self"],["__h"]]]],[11,"sub",R[101],R[130],4,[[[R[3]]],[R[3]]]],[11,"sub",R[107],R[130],13,[[[R[19]]],[R[19]]]],[11,"sub",R[111],R[130],20,[[[R[49]]],[R[49]]]],[11,"sub",R[113],R[130],32,[[[R[87]]],[R[87]]]],[11,"sub",E,R[130],33,[[[R[90]]],[R[90]]]],[11,"sub",R[0],R[130],35,[[[R[97]]],[R[97]]]],[11,R[131],R[101],R[132],4,[[["self"],[R[3]]]]],[11,R[131],R[107],R[132],13,[[["self"],[R[19]]]]],[11,R[131],R[111],R[132],20,[[["self"],[R[49]]]]],[11,R[131],R[113],R[132],32,[[[R[87]],["self"]]]],[11,R[131],E,R[132],33,[[["self"],[R[90]]]]],[11,R[131],R[0],R[132],35,[[["self"],[R[97]]]]],[11,"not",R[101],R[133],4,[[],[R[3]]]],[11,"not",R[107],R[133],13,[[],[R[19]]]],[11,"not",R[111],R[133],20,[[],[R[49]]]],[11,"not",R[113],R[133],32,[[],[R[87]]]],[11,"not",E,R[133],33,[[],[R[90]]]],[11,"not",R[0],R[133],35,[[],[R[97]]]],[11,"bitand",R[101],R[134],4,[[[R[3]]],[R[3]]]],[11,"bitand",R[107],R[134],13,[[[R[19]]],[R[19]]]],[11,"bitand",R[111],R[134],20,[[[R[49]]],[R[49]]]],[11,"bitand",R[113],R[134],32,[[[R[87]]],[R[87]]]],[11,"bitand",E,R[134],33,[[[R[90]]],[R[90]]]],[11,"bitand",R[0],R[134],35,[[[R[97]]],[R[97]]]],[11,"bitor",R[101],R[135],4,[[[R[3]]],[R[3]]]],[11,"bitor",R[107],R[135],13,[[[R[19]]],[R[19]]]],[11,"bitor",R[111],R[135],20,[[[R[49]]],[R[49]]]],[11,"bitor",R[113],R[135],32,[[[R[87]]],[R[87]]]],[11,"bitor",E,R[135],33,[[[R[90]]],[R[90]]]],[11,"bitor",R[0],R[135],35,[[[R[97]]],[R[97]]]],[11,"bitxor",R[101],R[136],4,[[[R[3]]],[R[3]]]],[11,"bitxor",R[107],R[136],13,[[[R[19]]],[R[19]]]],[11,"bitxor",R[111],R[136],20,[[[R[49]]],[R[49]]]],[11,"bitxor",R[113],R[136],32,[[[R[87]]],[R[87]]]],[11,"bitxor",E,R[136],33,[[[R[90]]],[R[90]]]],[11,"bitxor",R[0],R[136],35,[[[R[97]]],[R[97]]]],[11,R[137],R[101],R[138],4,[[["self"],[R[3]]]]],[11,R[137],R[107],R[138],13,[[["self"],[R[19]]]]],[11,R[137],R[111],R[138],20,[[["self"],[R[49]]]]],[11,R[137],R[113],R[138],32,[[[R[87]],["self"]]]],[11,R[137],E,R[138],33,[[["self"],[R[90]]]]],[11,R[137],R[0],R[138],35,[[["self"],[R[97]]]]],[11,R[139],R[101],R[140],4,[[["self"],[R[3]]]]],[11,R[139],R[107],R[140],13,[[["self"],[R[19]]]]],[11,R[139],R[111],R[140],20,[[["self"],[R[49]]]]],[11,R[139],R[113],R[140],32,[[[R[87]],["self"]]]],[11,R[139],E,R[140],33,[[["self"],[R[90]]]]],[11,R[139],R[0],R[140],35,[[["self"],[R[97]]]]],[11,R[141],R[101],R[142],4,[[["self"],[R[3]]]]],[11,R[141],R[107],R[142],13,[[["self"],[R[19]]]]],[11,R[141],R[111],R[142],20,[[["self"],[R[49]]]]],[11,R[141],R[113],R[142],32,[[[R[87]],["self"]]]],[11,R[141],E,R[142],33,[[["self"],[R[90]]]]],[11,R[141],R[0],R[142],35,[[["self"],[R[97]]]]],[11,"deref",R[55],E,24,[[["self"]],[R[63]]]],[11,"deref",E,E,26,[[["self"]]]],[11,"deref",E,E,27,[[["self"]],[T]]],[11,"deref",E,E,28,[[["self"]]]],[11,"index",E,E,25,[[["range",["usize"]],["self"],["usize"]],["self"]]],[11,"index",E,E,25,[[[R[144]],["self"]],["self"]]],[11,"index",E,E,25,[[[R[145],["usize"]],["self"],["usize"]],["self"]]],[11,"index",E,E,25,[[["self"],["usize"],[R[146],["usize"]]],["self"]]],[11,"index",E,E,25,[[["rangeto",["usize"]],["self"],["usize"]],["self"]]],[11,"index",E,E,25,[[[R[147],["usize"]],["self"],["usize"]],["self"]]],[11,R[143],E,E,25,[[["self"],["range",["usize"]],["usize"]],["self"]]],[11,R[143],E,E,25,[[[R[144]],["self"]],["self"]]],[11,R[143],E,E,25,[[["self"],[R[145],["usize"]],["usize"]],["self"]]],[11,R[143],E,E,25,[[["self"],["usize"],[R[146],["usize"]]],["self"]]],[11,R[143],E,E,25,[[["self"],["rangeto",["usize"]],["usize"]],["self"]]],[11,R[143],E,E,25,[[[R[147],["usize"]],["self"],["usize"]],["self"]]],[11,R[148],R[101],E,4,[[[R[127]]],[R[3]]]],[11,R[148],R[107],E,13,[[[R[127]]],[R[19]]]],[11,R[148],R[111],E,20,[[[R[127]]],[R[49]]]],[11,R[148],R[113],E,32,[[[R[127]]],[R[87]]]],[11,R[148],E,E,33,[[[R[127]]],[R[90]]]],[11,R[148],R[0],E,35,[[[R[127]]],[R[97]]]],[11,"fmt",R[101],E,4,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[107],E,13,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[111],E,20,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[113],E,32,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,33,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[0],E,35,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[101],E,4,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[107],E,13,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[111],E,20,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[113],E,32,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,33,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[0],E,35,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[101],E,4,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[107],E,13,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[111],E,20,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[113],E,32,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,33,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[0],E,35,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[101],E,4,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[107],E,13,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[111],E,20,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[113],E,32,[[["self"],[R[116]]],["result"]]],[11,"fmt",E,E,33,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[0],E,35,[[["self"],[R[116]]],["result"]]],[11,"fmt",R[55],E,23,[[[R[116]],["self"]],["result"]]],[11,"fmt",E,E,27,[[[R[116]],["self"]],["result"]]],[11,"fmt",R[112],E,42,[[[R[116]],["self"]],["result"]]],[11,"borrow",R[55],E,27,[[["self"]],[T]]],[11,R[100],E,E,27,[[["self"]],[T]]],[11,"null",E,"Returns a null device pointer.",38,[[],[R[46]]]],[11,"wrap",E,"Wrap the given raw pointer in a DevicePointer. The given…",38,[[],[R[46]]]],[11,"as_raw",E,"Returns the contained pointer as a raw pointer. The…",38,[[]]],[11,R[151],E,"Returns the contained pointer as a mutable raw pointer.…",38,[[["self"]]]],[11,"is_null",E,"Returns true if the pointer is null. # Examples:",38,[[],["bool"]]],[11,"offset",E,"Calculates the offset from a device pointer.",38,[[["isize"]],[R[46]]]],[11,R[152],E,"Calculates the offset from a device pointer using wrapping…",38,[[["isize"]],[R[46]]]],[11,"add",E,R[149],38,[[["usize"]],[R[46]]]],[11,"sub",E,R[149],38,[[["usize"]],[R[46]]]],[11,R[153],E,R[150],38,[[["usize"]],[R[46]]]],[11,R[154],E,R[150],38,[[["usize"]],[R[46]]]],[11,"null",E,"Returns a null unified pointer.",39,[[],[R[47]]]],[11,"wrap",E,"Wrap the given raw pointer in a UnifiedPointer. The given…",39,[[],[R[47]]]],[11,"as_raw",E,"Returns the contained pointer as a raw pointer.",39,[[]]],[11,R[151],E,"Returns the contained pointer as a mutable raw pointer.",39,[[["self"]]]],[11,"is_null",E,"Returns true if the pointer is null.",39,[[],["bool"]]],[11,"offset",E,"Calculates the offset from a unified pointer.",39,[[["isize"]],[R[47]]]],[11,R[152],E,"Calculates the offset from a unified pointer using…",39,[[["isize"]],[R[47]]]],[11,"add",E,R[149],39,[[["usize"]],[R[47]]]],[11,"sub",E,R[149],39,[[["usize"]],[R[47]]]],[11,R[153],E,R[150],39,[[["usize"]],[R[47]]]],[11,R[154],E,R[150],39,[[["usize"]],[R[47]]]]],"p":[[3,R[155]],[4,R[156]],[4,R[157]],[4,R[158]],[3,R[159]],[3,"Context"],[3,R[160]],[3,R[161]],[3,R[162]],[4,R[163]],[3,"Device"],[4,R[164]],[4,R[165]],[3,R[166]],[3,"Event"],[3,"GridSize"],[3,R[167]],[4,R[168]],[3,"Function"],[4,R[169]],[3,R[170]],[3,R[171]],[3,R[172]],[3,R[173]],[3,R[78]],[3,R[174]],[3,R[175]],[3,R[176]],[3,R[80]],[8,R[82]],[8,R[177]],[3,"Module"],[3,R[178]],[3,R[179]],[3,"Stream"],[3,R[180]],[3,R[181]],[3,"Devices"],[3,R[182]],[3,R[183]],[3,R[184]],[3,R[185]],[3,"Symbol"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);